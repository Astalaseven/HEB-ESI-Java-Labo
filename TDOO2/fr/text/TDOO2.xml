<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns="http://www.elml.ch" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.elml.ch ../../../_config/validate.xsd" 
	label="TDOO2" title="TDOO : Orienté Objet (suite)">
	
	<entry>
		<paragraph>
			Ce td n'est précédé d'aucun td d'exercices préparatoires MAIS le td précédent d'OO est supposé terminé!  
    </paragraph>
  </entry>
  
	<unit label="TdOO2" title="TdOO : Orienté Objet (suite)">
		<entry>
			<paragraph>  
				Continuons maintenant notre voyage dans l'orienté objet.
      </paragraph>  
    </entry>
    
		<learningObject title="Un cercle">
			<clarify> 
				<paragraph>  
					Notre but est de définir un cercle quelconque dans un espace à deux dimensions et de le manipuler.   
				</paragraph>  
				<paragraph>  
					Pour représenter un cercle, nous avons besoin de connaitre deux choses : 
					le centre et le rayon.   
				</paragraph>  
				<paragraph>  
					Le centre est représenté par un point ayant deux paramètres (abscisse et ordonnée).   
				</paragraph>  
				<paragraph>  
					Nous allons créer dans un premier temps une classe <formatted style="java">Point</formatted> 
					avant de définir une classe <formatted style="java">Cercle</formatted>.  
				</paragraph>  
				<paragraph>  
					À vous de tester correctement le bon fonctionnement de vos classes après chaque modification. 
					N'oubliez pas <formatted style="java"><formatted style="bold">Junit</formatted></formatted> pour ce faire ;)   
				</paragraph>  
			</clarify>
		</learningObject>
		
		<learningObject title="La classe Point">
			<act><paragraph title="Point" icon="act"/> 
				<paragraph>  
					Définissons la classe <formatted style="java">Point</formatted> qui représente un point dans l'espace et testons la au fur et à mesure.  
				</paragraph>  
				<list listStyle="ordered">
				  <item>
				    Il y a deux attributs privés : 
            <formatted style="code">abs</formatted> pour l'abscisse et <formatted style="code">ord</formatted> pour l'ordonnée.
          </item>  
					<item>
					  Le constructeur reçoit les valeurs des 2 attributs. Pas de test à faire : tout est valide.
          </item>  
					<item>
					  Écrivez une méthode <formatted style="java">main</formatted> qui crée 
					  un <formatted style="java">Point point1</formatted> avec les valeurs 2 et 3 et 
					  un <formatted style="java">Point point2</formatted> avec les valeurs 4 et 5. 
					  Compilez et exécutez la.
          </item>  
					<item>
					  Prévoyez les accesseurs et les mutateurs de <formatted style="java">Point</formatted>.
          </item>  
					<item>
					  Dans le <formatted style="java">main</formatted>, faites appel à ces méthodes. 
          </item>  
					<item>
					  Ajoutez une méthode <formatted style="java">toString()</formatted> 
					  qui retourne la chaine représentant le point sous la forme « (abs, ord) ».
          </item>  
					<item>
					  Dans le <formatted style="java">main</formatted>, affichez le point que vous avez créé, 
					  avant et après modification (appel aux setter). Compilez et exécutez la.
          </item>  
					<item>
					  Ajoutez la méthode <formatted style="java">int distance (Point autre)</formatted> 
					  qui retourne la distance entre le point courant et l'autre point donné en paramètre.
          </item>
          <item>
					  Dans votre méthode <formatted style="java">main</formatted>, calculez et affichez la distance entre
					  <formatted style="java">point1</formatted> et <formatted style="java">point2</formatted>. 
          </item>  
          <item>
					  Ajoutez la méthode <formatted style="java">Point pointMilieu(Point autre)</formatted> 
					  qui retourne le point situé au milieu du point courant et de l'autre point donné en paramètre.
          </item>
          <item>
					  Dans votre méthode <formatted style="java">main</formatted>, calculez et affichez le point au milieu de
					  <formatted style="java">point1</formatted> et de <formatted style="java">point2</formatted>. 
          </item>  
        </list>
      </act>
		</learningObject>
		
		<learningObject title="La classe Cercle">
			<act><paragraph title="Cercle" icon="act"/> 
				<paragraph>  
					Définissez une classe <formatted style="java">Cercle</formatted> pouvant décrire de façon commode un cercle 
					dans un espace à deux dimensions.  
				</paragraph>  
				<list listStyle="ordered">
				  <item> 
				    Pour les attributs, on vous propose d'en utiliser deux : 
				    le centre (un <formatted style="java">Point</formatted>) et le rayon (un <formatted style="java">int</formatted>).
          </item>  
					<item>
					  Le constructeur reçoit les valeurs des attributs et vérifie leur cohérence 
					  (le rayon est positif ou nul). 
					  Une <formatted style="java">IllegalArgumentException</formatted> est lancée si ce n'est pas le cas.
          </item>  
					<item>
					  Prévoyez les accesseurs et les mutateurs.
          </item>  
					<item>
					  Ajoutez une méthode <formatted style="java">toString()</formatted> qui retourne la chaine 
					  « [centre=(abs, ord), rayon=val] ». Bien sûr, vous utiliserez la méthode homonyme de la classe <formatted style="java">Point</formatted>.
          </item>  
					<item>
					  Écrivez une méthode <formatted style="java">main</formatted> qui crée et affiche le cercle dont le centre est (2,5) et le rayon est 3.
          </item>  
					<item>
					  Écrivez une méthode calculant sa surface.
          </item>  
					<item>
					  Dans votre méthode <formatted style="java">main</formatted>, calculez et affichez la surface du cercle créé. 
          </item>  
					<item>
					  Écrivez une méthode indiquant si un point reçu en paramètre est compris dans le cercle.
          </item>  
					<item>
					  Testez cette méthode dans le <formatted style="java">main</formatted>.
          </item>  
					<item>
					  Écrivez une méthode indiquant si le cercle a une intersection avec un autre cercle reçu en paramètre.
          </item>  
					<item>
					  Testez cette méthode dans le <formatted style="java">main</formatted>.
          </item>  
					<item>
					  Écrivez une méthode de classe recevant 2 points en paramètre et retournant le cercle dont le
		        diamètre est le segment reliant ces 2 points.
          </item>  
					<item>
					  Testez cette méthode dans le <formatted style="java">main</formatted>.
          </item>  
        </list>
      </act>
		</learningObject>
	</unit>
	
	<metadata>
		<organisation level="1ère année" module="Laboratoires Java">
			<creationPosition><posNumber>10</posNumber></creationPosition>
		</organisation>
		<prerequisites><preReqItem label="none"/></prerequisites>
		<keywords><keywordItem>Java</keywordItem><keywordItem>Linux</keywordItem></keywords>
		<technical>
			<technicalRequirement>
				<type>Browser</type>
				<name>any</name>
				<minimumVersion>unknown</minimumVersion>
			</technicalRequirement>
		</technical>
		<lessonInfo>
			<language language="fr" derived="no"/>
			<lifecycle>
				<version>2013 - 2014</version>
				<contribute>
<person name="BEJ" />  <person name="CLR" />  <person name="MCD" />  <person name="NPX" />  <person name="PBT" />  <person name="SRV" /> 
				</contribute>
			</lifecycle>
			<educational><typicalLearningTime><time/></typicalLearningTime></educational>
		</lessonInfo>
		<rights>
			<cost>no</cost>
			<copyright>Distribué sous licence Creative Commons Paternité - Partage à l'Identique 2.0 Belgique</copyright>
			<copyrightURL>http://creativecommons.org/licenses/by-sa/2.0/be/</copyrightURL>
		</rights>
	</metadata>

</lesson>
